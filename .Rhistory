DIC_in.emmc<-DIC_in.emmc[order(DIC_in.emmc$Sub_region),]
DIC_in.emmc
# Chunk 93
hist(Trends.midchanel$DIC_umol_kg)
shapiro.test(Trends.midchanel$DIC_umol_kg)# Normality rejected
DIC_mc<-lmer(DIC_umol_kg~Year * Sub_region + (1|Month) +
#(1|Zone)+
(1|SiteID), data=Trends.midchanel)
#summary(DIC_mc)
anova(DIC_mc)
ranova(DIC_mc)
step(DIC_mc)
DIC_mc<-lmer(DIC_umol_kg ~ Year + Sub_region + (1 | Month),
data = Trends.midchanel)
summary(DIC_mc)
plot(DIC_mc)
qqnorm(resid(DIC_mc))
acf(resid(DIC_mc), main="acf(resid(DIC Mid Channel))")
DIC_mc.emmc<-emmeans(DIC_mc, ~Sub_region+Year)
DIC_mc.emmc<-multcomp::cld(DIC_mc.emmc)
DIC_mc.emmc<-DIC_mc.emmc[order(DIC_mc.emmc$Sub_region),]
DIC_mc.emmc
# Chunk 94
hist(Trends.offshore$DIC_umol_kg)
shapiro.test(Trends.offshore$DIC_umol_kg)# Normality rejected
DIC_of<-lmer(DIC_umol_kg~Year * Sub_region +
(1|Month) + (1|SiteID),
data=Trends.offshore)
#summary(DIC_of)
anova(DIC_of)
ranova(DIC_of)
step(DIC_of)
DIC_of<-lmer(DIC_umol_kg ~ Year + Sub_region + (1 | Month),
data =Trends.offshore)
summary(DIC_of)
plot(DIC_of)
qqnorm(resid(DIC_of))
acf(resid(DIC_of), main="acf(resid(DIC Offshore))")
DIC_of.emmc<-emmeans(DIC_of, ~Sub_region+Year)
DIC_of.emmc<-multcomp::cld(DIC_of.emmc)
DIC_of.emmc<-DIC_of.emmc[order(DIC_of.emmc$Sub_region),]
DIC_of.emmc
# Chunk 95
hist(Trends.ocean$DIC_umol_kg)
shapiro.test(Trends.ocean$DIC_umol_kg)# Normality rejected
DIC_oc<-lmer(DIC_umol_kg ~ Year * Sub_region +
(1 | Month)+ (1|SiteID),
data=Trends.ocean)
#summary(DIC_oc)
anova(DIC_oc)
ranova(DIC_oc)
step(DIC_oc)
DIC_oc<-lmer(DIC_umol_kg ~ Year+ (1 | Month), data = Trends.ocean)
summary(DIC_oc)
plot(DIC_oc)
qqnorm(resid(DIC_oc))
acf(resid(DIC_oc), main="acf(resid(DIC open))")
DIC_oc.emmc<-emmeans(DIC_oc, ~Year)
DIC_oc.emmc<-multcomp::cld(DIC_oc.emmc)
#DIC_oc.emmc<-DIC_oc.emmc[order(DIC_oc.emmc$Sub_region),]
DIC_oc.emmc
# Chunk 96
DIC_models<-list("Inshore" = DIC_in,
"Mid channel" = DIC_mc,
"Offshore" = DIC_of,
"Ocean" = DIC_oc)
modelsummary(DIC_models, stars = TRUE,
#statistic = c('std.error', 'p.value', 'conf.int'),
title = 'DIC model outputs',
coef_map=factor_order)
#modelsummary(DIC_models, estimate = "p.value")
# Chunk 97
Long_plot2<- ggplot(Reef.Trends.data) +
MyTheme +
#scale_shape_manual(values=c(24, 25, 21))+
#guides(fill=guide_legend(override.aes=list(shape=21)))+
theme(axis.title.x = element_blank())
hist(Reef.Trends.data$dTA_MY)
Reef.Trends.data
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, options(knitr.kable.NA = ''))
# Chunk 2
# Libraries
library(plyr)
library(tidyverse)
library(reshape2)
library(lubridate)
library(knitr)
library(dplyr)
library(broom)
library(ggpubr)
library(ggthemes)
library(gridExtra)
library(ggExtra)
# Interactive Maps
library(leaflet)
# Plots
MyTheme<-theme_bw() +
theme(legend.position="top",
plot.background=element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.box.background = element_rect(),
panel.background =element_rect(fill = NA,
color = "black")
)
# Chunk 3
# 1. Get data
CC.data<-read.csv("Data/ws-mysql-v4.csv", header = T)
#summary(CC.data)
str((CC.data))
summary(CC.data$Location)
Sites<-as.data.frame(unique(CC.data$SiteID))
#CC.data$SiteID[CC.data$SiteID=="LK"]<-"21LK"
CC.data$SiteID[CC.data$SiteID=="WS cruise"]<-"WS"
# Sites<-as.data.frame(unique(CC.data$SiteID))
# 2. Format variables
# Date/times
# Year
CC.data$Year<-as.numeric(CC.data$Year)
summary(CC.data$Year)
CC.data<-CC.data[!is.na(CC.data$Year),]
# UTC Date
CC.data$UTCDate<-as.Date(CC.data$UTCDate, "%m/%d/%Y", tz="UTC")
summary(CC.data$UTCDate)
# UTC Date-time
CC.data$UTCDate_Time<-paste(CC.data$UTCDate, CC.data$UTCTime, sep = " ")
CC.data$UTCDate_Time<-as_datetime(CC.data$UTCDate_Time, tz="UTC")
summary(CC.data$UTCDate_Time)
# EST Date-time
CC.data$datetime<-as_datetime(CC.data$UTCDate_Time, tz="EST")
CC.data$ESTDate<-as.Date(CC.data$datetime, tz="EST")
CC.data$ESTTime <- format(CC.data$datetime,"%H:%M:%S")
#CC.data$Month<-month(CC.data$ESTDate)
CC.data$Month <- as.numeric(format(CC.data$ESTDate,"%m"))
summary(CC.data$Month)
CC.data$Month<-month.abb[CC.data$Month]
#CC.data$Month<-factor(CC.data$Month, levels = month.name)
CC.data$Month<-factor(CC.data$Month,
levels = c("Apr", "May","Jun",
"Jul", "Aug", "Sep",
"Oct","Nov","Dec",
"Jan", "Feb", "Mar"))
CC.data$Months<-months(CC.data$ESTDate)
CC.data$Months<-factor(CC.data$Months, levels = month.name)
## Add time variables
CC.data <- transform(CC.data,
SiteID = factor(SiteID),
MY = format(datetime, format = '%Y-%m'),
MoY = as.numeric(format(datetime, format = '%m')),
#DoY = as.numeric(format(datetime, format = '%j')),
ToD = as.numeric(format(datetime, format = '%H')) +
(as.numeric(format(datetime, format = '%M')) / 60))
summary(CC.data)
# Numerical data
# CC.data$Latitude <-as.numeric((as.character(CC.data$Latitude)))
# CC.data$Longitude <-as.numeric((as.character(CC.data$Longitude)))
# CC.data$Temperature_C <-
#    as.numeric((as.character(CC.data$Temperature_C)))
# Temperature_NA2<-CC.data[(is.na(CC.data$Temperature_C)),]
# CC.data$TA <-as.numeric((as.character(CC.data$TA)))
# CC.data$DIC <-as.numeric((as.character(CC.data$DIC)))
# CC.data$pH <-as.numeric((as.character(CC.data$pH)))
# CC.data$pCO2 <-as.numeric((as.character(CC.data$pCO2)))
# CC.data$Aragonite_Sat_W<-
#   as.numeric((as.character(CC.data$Aragonite_Sat_W)))
# Define seasons (rougly by month)
metseasons <- c(
"01" = "Winter", "02" = "Winter", "03" = "Winter",
"04" = "Spring", "05" = "Spring", "06" = "Spring",
"07" = "Summer", "08" = "Summer", "09" = "Summer",
"10" = "Fall", "11" = "Fall", "12" = "Fall"
)
Seasons<-as.data.frame(metseasons[format(CC.data$ESTDate, "%m")])
colnames(Seasons)<-"Season"
CC.data<-cbind(CC.data, Seasons)
# Adjust byu days of the month
CC.data$Season[(CC.data$Months=="March" & CC.data$DoM>19)]<-"Spring"
CC.data$Season[(CC.data$Months=="June" & CC.data$DoM>19)]<-"Summer"
CC.data$Season[(CC.data$Months=="September" & CC.data$DoM>21)]<-"Fall"
CC.data$Season[(CC.data$Months=="December" & CC.data$DoM>20)]<-"Winter"
precipitation<-c(
"01" = "Dry", "02" = "Dry", "03" = "Dry", "04" = "Dry",
"05" = "Wet", "06" = "Wet", "07" = "Wet",
"08" = "Wet", "09" = "Wet", "10" = "Wet",
"11" = "Dry",  "12" = "Dry"
)
Precipitation<-as.data.frame(precipitation[format(CC.data$ESTDate, "%m")])
colnames(Precipitation)<-"Precipitation"
CC.data<-cbind(CC.data, Precipitation)
#Get only FLK data#
Metadata<-read.csv("Data/FLKLocations.csv", header = T)
FLK.data<-join(CC.data, Metadata,
type = "left", by="SiteID")
str(FLK.data)
FLK.data<-subset(FLK.data, FLK.data$Sub_region!="NA")
FLK.data$Sub_region<-factor(FLK.data$Sub_region, levels = c(
"BB", "UK", "MK", "LK"))
FLK.data$Zone<-factor(FLK.data$Zone, levels = c(
"Inshore", "Mid channel",
"Offshore", "Oceanic"))
# Label and filter extreme events
FLK.data$Extreme<-"Normal"
FLK.data$Extreme[FLK.data$MY=="2010-03"] <-"ColdMortality"
FLK.data$Extreme[FLK.data$MY=="2010-08"] <-"Waves/Overcast"
FLK.data$Extreme[FLK.data$MY=="2011-10"] <-"LowSalinty"
FLK.data$Extreme[FLK.data$MY=="2011-08"] <-"HighOmega_NoReason"
FLK.data$Extreme<-as.factor(FLK.data$Extreme)
# Label and filter extreme events
FLK.data$Extreme<-"Normal"
FLK.data$Extreme[FLK.data$MY=="2010-03"] <-"ColdMortality"
FLK.data$Extreme[FLK.data$MY=="2010-08"] <-"Waves/Overcast"
FLK.data$Extreme[FLK.data$MY=="2011-10"] <-"LowSalinty"
FLK.data$Extreme[FLK.data$MY=="2011-08"] <-"HighOmega_NoReason"
FLK.data$Extreme<-as.factor(FLK.data$Extreme)
Locations <- FLK.data %>% select(Latitude,
Longitude,
Sub_region,
SiteID)
#3Locations$GPS<-paste(Locations$Latitude,
#"-",
#Locations$Longitude)
Locations<-unique(Locations)
pal.gen <- colorFactor(palette = "Set1",
domain = CC.data$Zone)
WS.GPS.Sites <- ddply (FLK.data, .(Sub_region, Zone, SiteID),summarise,
Lat = mean (Latitude, na.rm = T),
Lon = mean (Longitude, na.rm = T),
number = n())
#write.csv(WS.GPS.Sites, "FLK_results/1_meanSatationGPS_v3.csv")
# Map information
pal.gen <- colorFactor(palette = "Set1",
domain = WS.GPS.Sites$Zone)
Cases_Loc_Zone<-FLK.data %>% count(Sub_region,
Zone,
sort = F)
Cases_Loc_Zone<-as.data.frame(Cases_Loc_Zone %>%
pivot_wider(names_from = Zone,
values_from = n))
#write.csv(Cases_Loc_Zone, "FLK_results/SampleS_Region_zone.csv")
kable(as.data.frame(Cases_Loc_Zone, format = "markdown"),
longtable = TRUE)
Cases_Reg_Year<-FLK.data %>% count(Year, Sub_region, sort = F)
Cases_Reg_Year<-as.data.frame(Cases_Reg_Year %>%
pivot_wider(names_from = Year, values_from = n))
#write.csv(Cases_Reg_Year, "FLK_results/SampleS_Region_Year.csv")
kable(as.data.frame(Cases_Reg_Year, format = "html"),  caption = "Samples collected each year")
Cases_Reg_season<-FLK.data %>% count(Season, Sub_region, sort = T)
Cases_Reg_season<-as.data.frame(Cases_Reg_season %>%
pivot_wider(names_from = Season, values_from = n))
#write.csv(Cases_Reg_season, "FLK_results/SampleS_RegionSeason.csv")
kable(as.data.frame(Cases_Reg_season, format = "html"),
caption = "Samples collected in each seson")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, options(knitr.kable.NA = ''))
# Chunk 2
# Libraries
library(plyr)
library(tidyverse)
library(reshape2)
library(lubridate)
library(knitr)
library(dplyr)
library(broom)
library(ggpubr)
library(ggthemes)
library(gridExtra)
library(ggExtra)
# Interactive Maps
library(leaflet)
# Plots
MyTheme<-theme_bw() +
theme(legend.position="top",
plot.background=element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.box.background = element_rect(),
panel.background =element_rect(fill = NA,
color = "black")
)
# Chunk 3
# 1. Get data
CC.data<-read.csv("Data/ws-mysql-v4.csv", header = T)
#summary(CC.data)
str((CC.data))
summary(CC.data$Location)
Sites<-as.data.frame(unique(CC.data$SiteID))
#CC.data$SiteID[CC.data$SiteID=="LK"]<-"21LK"
CC.data$SiteID[CC.data$SiteID=="WS cruise"]<-"WS"
# Sites<-as.data.frame(unique(CC.data$SiteID))
# 2. Format variables
# Date/times
# Year
CC.data$Year<-as.numeric(CC.data$Year)
summary(CC.data$Year)
CC.data<-CC.data[!is.na(CC.data$Year),]
# UTC Date
CC.data$UTCDate<-as.Date(CC.data$UTCDate, "%m/%d/%Y", tz="UTC")
summary(CC.data$UTCDate)
# UTC Date-time
CC.data$UTCDate_Time<-paste(CC.data$UTCDate, CC.data$UTCTime, sep = " ")
CC.data$UTCDate_Time<-as_datetime(CC.data$UTCDate_Time, tz="UTC")
summary(CC.data$UTCDate_Time)
# EST Date-time
CC.data$datetime<-as_datetime(CC.data$UTCDate_Time, tz="EST")
CC.data$ESTDate<-as.Date(CC.data$datetime, tz="EST")
CC.data$ESTTime <- format(CC.data$datetime,"%H:%M:%S")
#CC.data$Month<-month(CC.data$ESTDate)
CC.data$Month <- as.numeric(format(CC.data$ESTDate,"%m"))
summary(CC.data$Month)
CC.data$Month<-month.abb[CC.data$Month]
#CC.data$Month<-factor(CC.data$Month, levels = month.name)
CC.data$Month<-factor(CC.data$Month,
levels = c("Apr", "May","Jun",
"Jul", "Aug", "Sep",
"Oct","Nov","Dec",
"Jan", "Feb", "Mar"))
CC.data$Months<-months(CC.data$ESTDate)
CC.data$Months<-factor(CC.data$Months, levels = month.name)
## Add time variables
CC.data <- transform(CC.data,
SiteID = factor(SiteID),
MY = format(datetime, format = '%Y-%m'),
MoY = as.numeric(format(datetime, format = '%m')),
#DoY = as.numeric(format(datetime, format = '%j')),
ToD = as.numeric(format(datetime, format = '%H')) +
(as.numeric(format(datetime, format = '%M')) / 60))
summary(CC.data)
# Numerical data
# CC.data$Latitude <-as.numeric((as.character(CC.data$Latitude)))
# CC.data$Longitude <-as.numeric((as.character(CC.data$Longitude)))
# CC.data$Temperature_C <-
#    as.numeric((as.character(CC.data$Temperature_C)))
# Temperature_NA2<-CC.data[(is.na(CC.data$Temperature_C)),]
# CC.data$TA <-as.numeric((as.character(CC.data$TA)))
# CC.data$DIC <-as.numeric((as.character(CC.data$DIC)))
# CC.data$pH <-as.numeric((as.character(CC.data$pH)))
# CC.data$pCO2 <-as.numeric((as.character(CC.data$pCO2)))
# CC.data$Aragonite_Sat_W<-
#   as.numeric((as.character(CC.data$Aragonite_Sat_W)))
# Chunk 4
# Define seasons (rougly by month)
metseasons <- c(
"01" = "Winter", "02" = "Winter", "03" = "Winter",
"04" = "Spring", "05" = "Spring", "06" = "Spring",
"07" = "Summer", "08" = "Summer", "09" = "Summer",
"10" = "Fall", "11" = "Fall", "12" = "Fall"
)
Seasons<-as.data.frame(metseasons[format(CC.data$ESTDate, "%m")])
colnames(Seasons)<-"Season"
CC.data<-cbind(CC.data, Seasons)
# Adjust byu days of the month
CC.data$Season[(CC.data$Months=="March" & CC.data$DoM>19)]<-"Spring"
CC.data$Season[(CC.data$Months=="June" & CC.data$DoM>19)]<-"Summer"
CC.data$Season[(CC.data$Months=="September" & CC.data$DoM>21)]<-"Fall"
CC.data$Season[(CC.data$Months=="December" & CC.data$DoM>20)]<-"Winter"
# Chunk 5
precipitation<-c(
"01" = "Dry", "02" = "Dry", "03" = "Dry", "04" = "Dry",
"05" = "Wet", "06" = "Wet", "07" = "Wet",
"08" = "Wet", "09" = "Wet", "10" = "Wet",
"11" = "Dry",  "12" = "Dry"
)
Precipitation<-as.data.frame(precipitation[format(CC.data$ESTDate, "%m")])
colnames(Precipitation)<-"Precipitation"
CC.data<-cbind(CC.data, Precipitation)
# Chunk 6
#Get only FLK data#
Metadata<-read.csv("Data/FLKLocations.csv", header = T)
FLK.data<-join(CC.data, Metadata,
type = "left", by="SiteID")
str(FLK.data)
FLK.data<-subset(FLK.data, FLK.data$Sub_region!="NA")
FLK.data$Sub_region<-factor(FLK.data$Sub_region, levels = c(
"BB", "UK", "MK", "LK"))
FLK.data$Zone<-factor(FLK.data$Zone, levels = c(
"Inshore", "Mid channel",
"Offshore", "Oceanic"))
# Label and filter extreme events
FLK.data$Extreme<-"Normal"
FLK.data$Extreme[FLK.data$MY=="2010-03"] <-"ColdMortality"
FLK.data$Extreme[FLK.data$MY=="2010-08"] <-"Waves/Overcast"
FLK.data$Extreme[FLK.data$MY=="2011-10"] <-"LowSalinty"
FLK.data$Extreme[FLK.data$MY=="2011-08"] <-"HighOmega_NoReason"
FLK.data$Extreme<-as.factor(FLK.data$Extreme)
Locations <- FLK.data %>% select(Latitude,
Longitude,
Sub_region,
SiteID)
#3Locations$GPS<-paste(Locations$Latitude,
#"-",
#Locations$Longitude)
Locations<-unique(Locations)
pal.gen <- colorFactor(palette = "Set1",
domain = CC.data$Zone)
WS.GPS.Sites <- ddply (FLK.data, .(Sub_region, Zone, SiteID),summarise,
Lat = mean (Latitude, na.rm = T),
Lon = mean (Longitude, na.rm = T),
number = n())
#write.csv(WS.GPS.Sites, "FLK_results/1_meanSatationGPS_v3.csv")
# Map information
pal.gen <- colorFactor(palette = "Set1",
domain = WS.GPS.Sites$Zone)
Cases_Loc_Zone<-FLK.data %>% count(Sub_region,
Zone,
sort = F)
Cases_Loc_Zone<-as.data.frame(Cases_Loc_Zone %>%
pivot_wider(names_from = Zone,
values_from = n))
#write.csv(Cases_Loc_Zone, "FLK_results/SampleS_Region_zone.csv")
kable(as.data.frame(Cases_Loc_Zone, format = "markdown"),
longtable = TRUE)
Cases_Reg_Year<-FLK.data %>% count(Year, Sub_region, sort = F)
Cases_Reg_Year<-as.data.frame(Cases_Reg_Year %>%
pivot_wider(names_from = Year, values_from = n))
#write.csv(Cases_Reg_Year, "FLK_results/SampleS_Region_Year.csv")
kable(as.data.frame(Cases_Reg_Year, format = "html"),  caption = "Samples collected each year")
Cases_Reg_season<-FLK.data %>% count(Season, Sub_region, sort = T)
Cases_Reg_season<-as.data.frame(Cases_Reg_season %>%
pivot_wider(names_from = Season, values_from = n))
#write.csv(Cases_Reg_season, "FLK_results/SampleS_RegionSeason.csv")
kable(as.data.frame(Cases_Reg_season, format = "html"),
caption = "Samples collected in each seson")
View(FLK.data)
View(FLK.data)
Cases_Month_Location<-FLK.data %>% count(Sub_region,
Zone,
Month, sort = F)
Cases_Month_Location<-as.data.frame(Cases_Month_Location %>%
pivot_wider(names_from = Month, values_from = n))
#write.csv(Cases_Month_Location, "FLK_results/SampleS_Monthlocation.csv")
kable(as.data.frame(Cases_Month_Location, format = "html"),
caption="Samples collected by month-location")
Cases_Site_FLK<-FLK.data %>% count(Year, SiteID, sort = F)
#Cases_Site_FLK
Cases_Site_FLK<-as.data.frame(Cases_Site_FLK %>%
pivot_wider(names_from = Year, values_from = n))
#write.csv(Cases_Site_FLK, "FLK_results/SampleSiteIDFLK.csv")
kable(as.data.frame(Cases_Site_FLK, format = "html"),
caption = "Samples collected in SiteIDs")
# Libraries
library(plyr)
library(tidyverse)
library(reshape2)
library(lubridate)
library(knitr)
library(dplyr)
library(broom)
library(ggpubr)
library(ggthemes)
library(gridExtra)
library(ggExtra)
# Interactive Maps
library(leaflet)
# Plots
MyTheme<-theme_bw() +
theme(legend.position="top",
plot.background=element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.box.background = element_rect(),
panel.background =element_rect(fill = NA,
color = "black")
)
# 1. Get data
CC.data<-read.csv("Data/ws-mysql-v4.csv", header = T)
#summary(CC.data)
str((CC.data))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, options(knitr.kable.NA = ''))
# Chunk 2
# Libraries
library(plyr)
library(tidyverse)
library(reshape2)
library(lubridate)
library(knitr)
library(dplyr)
library(broom)
library(ggpubr)
library(ggthemes)
library(gridExtra)
library(ggExtra)
# Interactive Maps
library(leaflet)
# Plots
MyTheme<-theme_bw() +
theme(legend.position="top",
plot.background=element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.box.background = element_rect(),
panel.background =element_rect(fill = NA,
color = "black")
)
# 1. Get data
CC.data<-read.csv("Data/ws-mysql-v4.csv", header = T)
#summary(CC.data)
str((CC.data))
View(CC.data)
